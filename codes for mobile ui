import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Area, AreaChart } from 'recharts';
import { Bluetooth, History, Wifi, Battery, Signal } from 'lucide-react';

const AdrenalineMonitorApp = () => {
  const [currentLevel, setCurrentLevel] = useState(287);
  const [isConnected, setIsConnected] = useState(true);
  const [showAlert, setShowAlert] = useState(false);
  const [activeView, setActiveView] = useState('dashboard');
  const [animationKey, setAnimationKey] = useState(0);

  // Real-time data simulation
  const [realtimeData, setRealtimeData] = useState([
    { time: '09:00', level: 245 },
    { time: '09:15', level: 267 },
    { time: '09:30', level: 289 },
    { time: '09:45', level: 287 },
  ]);

  // Historical data for trends
  const historicalData = [
    { day: 'Mon', avg: 245, peak: 320 },
    { day: 'Tue', avg: 267, peak: 340 },
    { day: 'Wed', avg: 289, peak: 380 },
    { day: 'Thu', avg: 287, peak: 365 },
    { day: 'Fri', avg: 302, peak: 420 },
    { day: 'Sat', avg: 234, peak: 280 },
    { day: 'Sun', avg: 256, peak: 295 },
  ];

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      const newLevel = Math.floor(Math.random() * 100) + 250;
      setCurrentLevel(newLevel);
      
      const now = new Date();
      const timeStr = now.toLocaleTimeString('en-US', { 
        hour12: false, 
        hour: '2-digit', 
        minute: '2-digit' 
      });
      
      setRealtimeData(prev => [
        ...prev.slice(-10),
        { time: timeStr, level: newLevel }
      ]);
      
      // Trigger alert if level is high
      if (newLevel > 350) {
        setShowAlert(true);
        setTimeout(() => setShowAlert(false), 3000);
      }
      
      setAnimationKey(prev => prev + 1);
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  const getStatusColor = (level) => {
    if (level < 300) return 'text-green-400';
    if (level < 350) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getStatusText = (level) => {
    if (level < 300) return 'Normal';
    if (level < 350) return 'Elevated';
    return 'High';
  };

  return (
    <div className="w-full max-w-sm mx-auto bg-gray-900 text-white rounded-3xl overflow-hidden shadow-2xl border border-gray-700">
      {/* Status Bar */}
      <div className="flex justify-between items-center px-4 py-2 bg-black text-xs">
        <div className="flex items-center gap-1">
          <Signal className="w-3 h-3" />
          <Wifi className="w-3 h-3" />
          <span>Verizon</span>
        </div>
        <div className="text-center font-medium">9:41 AM</div>
        <div className="flex items-center gap-1">
          <span>100%</span>
          <Battery className="w-3 h-3" />
        </div>
      </div>

      {/* Alert Banner */}
      {showAlert && (
        <div className="bg-red-600 text-white px-4 py-2 text-sm animate-pulse">
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 bg-white rounded-full animate-ping"></div>
            Adrenaline Spiking - Stay Calm
          </div>
        </div>
      )}

      {/* Header */}
      <div className="px-6 py-4 bg-gradient-to-r from-blue-900 to-purple-900">
        <div className="flex items-center justify-between mb-2">
          <h1 className="text-xl font-bold">NeuroWatch</h1>
          <div className="flex items-center gap-2">
            <Bluetooth className={`w-5 h-5 ${isConnected ? 'text-blue-400' : 'text-gray-500'}`} />
            <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-400' : 'bg-red-400'}`}></div>
          </div>
        </div>
        <p className="text-sm text-gray-300">Wearable Patch Connected</p>
      </div>

      {/* Navigation */}
      <div className="flex border-b border-gray-700">
        <button
          onClick={() => setActiveView('dashboard')}
          className={`flex-1 py-3 text-sm font-medium transition-colors ${
            activeView === 'dashboard' 
              ? 'text-blue-400 border-b-2 border-blue-400' 
              : 'text-gray-400 hover:text-white'
          }`}
        >
          Dashboard
        </button>
        <button
          onClick={() => setActiveView('history')}
          className={`flex-1 py-3 text-sm font-medium transition-colors flex items-center justify-center gap-2 ${
            activeView === 'history' 
              ? 'text-blue-400 border-b-2 border-blue-400' 
              : 'text-gray-400 hover:text-white'
          }`}
        >
          <History className="w-4 h-4" />
          History
        </button>
      </div>

      {/* Dashboard View */}
      {activeView === 'dashboard' && (
        <div className="p-6 space-y-6">
          {/* Current Level Display */}
          <div className="bg-gray-800 rounded-2xl p-6 border border-gray-700 shadow-lg">
            <div className="text-center">
              <div className="text-sm text-gray-400 mb-2">Current Adrenaline Level</div>
              <div 
                key={animationKey}
                className="text-4xl font-bold mb-2 transition-all duration-500 animate-pulse"
                style={{ 
                  color: currentLevel > 350 ? '#f87171' : currentLevel > 300 ? '#fbbf24' : '#10b981',
                  textShadow: `0 0 20px ${currentLevel > 350 ? '#f87171' : currentLevel > 300 ? '#fbbf24' : '#10b981'}40`
                }}
              >
                {currentLevel}
              </div>
              <div className="text-sm text-gray-400">pg/mL</div>
              <div className={`text-sm font-medium mt-2 ${getStatusColor(currentLevel)}`}>
                {getStatusText(currentLevel)}
              </div>
            </div>
          </div>

          {/* Real-time Graph */}
          <div className="bg-gray-800 rounded-2xl p-4 border border-gray-700 shadow-lg">
            <div className="text-sm text-gray-400 mb-4">Real-time Monitoring</div>
            <ResponsiveContainer width="100%" height={200}>
              <AreaChart data={realtimeData}>
                <defs>
                  <linearGradient id="adrenalineGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.8}/>
                    <stop offset="95%" stopColor="#3b82f6" stopOpacity={0.1}/>
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis 
                  dataKey="time" 
                  stroke="#9ca3af"
                  fontSize={10}
                />
                <YAxis 
                  stroke="#9ca3af"
                  fontSize={10}
                  domain={['dataMin - 20', 'dataMax + 20']}
                />
                <Area
                  type="monotone"
                  dataKey="level"
                  stroke="#3b82f6"
                  strokeWidth={2}
                  fill="url(#adrenalineGradient)"
                  dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}
                  activeDot={{ r: 6, stroke: '#3b82f6', strokeWidth: 2, fill: '#1e40af' }}
                />
              </AreaChart>
            </ResponsiveContainer>
          </div>

          {/* Quick Stats */}
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-gray-800 rounded-xl p-4 border border-gray-700">
              <div className="text-xs text-gray-400">24h Average</div>
              <div className="text-xl font-bold text-blue-400">267 pg/mL</div>
            </div>
            <div className="bg-gray-800 rounded-xl p-4 border border-gray-700">
              <div className="text-xs text-gray-400">Peak Today</div>
              <div className="text-xl font-bold text-orange-400">342 pg/mL</div>
            </div>
          </div>
        </div>
      )}

      {/* History View */}
      {activeView === 'history' && (
        <div className="p-6 space-y-6">
          <div className="bg-gray-800 rounded-2xl p-4 border border-gray-700 shadow-lg">
            <div className="text-sm text-gray-400 mb-4">Weekly Trends</div>
            <ResponsiveContainer width="100%" height={200}>
              <LineChart data={historicalData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis 
                  dataKey="day" 
                  stroke="#9ca3af"
                  fontSize={10}
                />
                <YAxis 
                  stroke="#9ca3af"
                  fontSize={10}
                />
                <Line
                  type="monotone"
                  dataKey="avg"
                  stroke="#10b981"
                  strokeWidth={2}
                  dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}
                  name="Average"
                />
                <Line
                  type="monotone"
                  dataKey="peak"
                  stroke="#f59e0b"
                  strokeWidth={2}
                  dot={{ fill: '#f59e0b', strokeWidth: 2, r: 4 }}
                  name="Peak"
                />
              </LineChart>
            </ResponsiveContainer>
            <div className="flex justify-center gap-6 mt-4 text-xs">
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                <span className="text-gray-400">Average</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                <span className="text-gray-400">Peak</span>
              </div>
            </div>
          </div>

          <div className="space-y-3">
            <div className="text-sm text-gray-400">Recent Events</div>
            {[
              { time: '2 hours ago', event: 'Exercise detected', level: '420 pg/mL' },
              { time: '5 hours ago', event: 'Stress spike', level: '365 pg/mL' },
              { time: '1 day ago', event: 'Meditation session', level: '180 pg/mL' },
            ].map((event, index) => (
              <div key={index} className="bg-gray-800 rounded-xl p-3 border border-gray-700">
                <div className="flex justify-between items-start">
                  <div>
                    <div className="text-sm font-medium text-white">{event.event}</div>
                    <div className="text-xs text-gray-400">{event.time}</div>
                  </div>
                  <div className="text-sm text-blue-400 font-medium">{event.level}</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Bottom Navigation */}
      <div className="bg-gray-800 border-t border-gray-700 p-4">
        <button className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-xl transition-colors shadow-lg">
          Sync Data
        </button>
      </div>
    </div>
  );
};

export default AdrenalineMonitorApp;